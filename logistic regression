# Logistic Regression (LR):
# - A classification algorithm used in Machine Learning to predict the likelihood of a categorical dependent variable.
# - The dependent variable in logistic regression is binary (0 or 1), representing outcomes like:
#   1 (yes, success, etc.) or 0 (no, failure, etc.).

# Key points:
# - LR is a discriminative model, whereas Naive Bayes is a generative model.
# - LR performs better than Naive Bayes in cases of collinearity because:
#   - Naive Bayes assumes all features are independent.
#   - Logistic Regression does not have this assumption.
# - Naive Bayes tends to work well with smaller datasets.

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the datasets
datasets = pd.read_csv(r' PATH TO Social Network Ads.csv(ATTACHED TO LOGISTIC REGRESSION SOURCES AND OUTPUTS FOLDER')

# Extracting features and target variable
X = datasets.iloc[:, [2, 3]].values
Y = datasets.iloc[:, 4].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)


# Fitting the Logistic Regression into the Training set
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0)
classifier.fit(X_train, Y_train)

# Predicting the test set results
Y_Pred = classifier.predict(X_test)

# Making the Confusion Matrix# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test, Y_Pred)

# Visualising the Training set results
from matplotlib.colors import ListedColormap
X_Set, Y_Set = X_train, Y_train
X1, X2 = np.meshgrid(np.arange(start=X_Set[:, 0].min() - 1, stop=X_Set[:, 0].max() + 1, step=0.01),
                     np.arange(start=X_Set[:, 1].min() - 1, stop=X_Set[:, 1].max() + 1, step=0.01))

plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha=0.75, cmap=ListedColormap(('red', 'green')))

plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())                                                    
plt.ylim(X2.min(), X2.max())

for i, j in enumerate(np.unique(Y_Set)):
    plt.scatter(X_Set[Y_Set == j, 0], X_Set[Y_Set == j, 1],
                c=ListedColormap(('red', 'green'))(i), label=j)

print(cm)
plt.show()
