# Polynomial Regression is a type of linear regression in which the relationship
# between the independent variable x and the dependent variable y is described
# as an nth degree polynomial. This type of regression is also known as
# "extended" linear regression. Polynomial regression is used to model a
# nonlinear relationship between the value of an independent variable x and the
# conditional mean of a dependent variable y. This relationship is represented
# by the notation E(y | x). This is solely a result of the non-linear relationship
# that exists between the dependent and independent variables. When we want to
# transform linear regression into polynomial regression, we just add some
# polynomial terms.


# for outputs of this algo please go to https://github.com/Torajabu/Standard-ML-Algorithms---Python/tree/main/polynomial%20regression%20%20output


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Generate data points
x = np.arange(0, 27)
y = [4, 5, 7, 8, 10, 9, 10, 23, 27, 44, 50, 63, 67, 60, 62, 70, 75, 88, 81, 87, 95, 108, 135, 151, 160, 169, 179]

# Plotting the data points
plt.figure(figsize=(10, 6))
plt.scatter(x, y)
plt.show()

# Polynomial regression
from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree=2, include_bias=False)
poly_features = poly.fit_transform(x.reshape(-1, 1))

from sklearn.linear_model import LinearRegression
poly_reg_model = LinearRegression()
poly_reg_model.fit(poly_features, y)
y_predicted = poly_reg_model.predict(poly_features)

# Plotting the polynomial regression
plt.figure(figsize=(10, 6))
plt.title("Your first polynomial regression - congrats!", size=16)
plt.scatter(x, y)
plt.plot(x, y_predicted, c="red")
plt.show()
